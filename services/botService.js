const User = require('../models/User');
const PregnancyService = require('./pregnancyService');
const KeywordService = require('./keywordService');
const { calculatePregnancyWeek, isValidDate, parseDate } = require('../utils/dateUtils');

class BotService {
    constructor(bot) {
        this.bot = bot;
        this.pregnancyService = new PregnancyService();
        this.keywordService = new KeywordService();
        this.userStates = new Map(); // Track user conversation states
    }

    initializeHandlers() {
        // Handle /start command
        this.bot.onText(/\/start/, this.handleStart.bind(this));

        // Handle "‡§ó‡§∞‡•ç‡§≠" keyword
        this.bot.onText(/‡§ó‡§∞‡•ç‡§≠/, this.handleGarbh.bind(this));

        // Handle all text messages
        this.bot.on('message', this.handleMessage.bind(this));

        // Handle callback queries (Yes/No feedback)
        this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        const firstName = msg.from.first_name || 'Sister';

        try {
            // Check if user already exists
            const existingUser = await User.findOne({ telegramId: chatId.toString() });

            if (existingUser) {
                await this.sendWelcomeBackMessage(chatId, firstName, existingUser.language);
                return;
            }

            // Ask for language selection for new users
            await this.sendLanguageSelection(chatId, firstName);
        } catch (error) {
            console.error('Error in handleStart:', error);
            await this.bot.sendMessage(chatId, 'Sorry, there was an error. Please try again later. / Kshama karen, kuch truti hui hai. Kripaya baad mein punah prayas karen.');
        }
    }

    async handleGarbh(msg) {
        await this.handleStart(msg);
    }

    async sendLanguageSelection(chatId, firstName) {
        const message = `üôè Namaste ${firstName}! Welcome to Sugam Garbh!

Please choose your preferred language:
‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:`;

        const options = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‡§π‡§ø‡§Ç‡§¶‡•Ä üáÆüá≥', callback_data: 'lang_hindi' },
                        { text: 'English üá∫üá∏', callback_data: 'lang_english' }
                    ]
                ]
            }
        };

        await this.bot.sendMessage(chatId, message, options);
    }

    async sendConsentMessage(chatId, firstName, language = 'hindi') {
        let consentMessage, options;

        if (language === 'english') {
            consentMessage = `üôè Welcome ${firstName}! Welcome to Sugam Garbh.

I will provide weekly information and guidance during your pregnancy.

‚ö†Ô∏è Important Notice:
‚Ä¢ This is for educational purposes only, not medical advice
‚Ä¢ Continue regular doctor check-ups
‚Ä¢ Contact doctor immediately in emergencies

Do you agree to these terms?`;

            options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'Yes, I agree ‚úÖ', callback_data: 'consent_yes' },
                            { text: 'No ‚ùå', callback_data: 'consent_no' }
                        ]
                    ]
                }
            };
        } else {
            consentMessage = `üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ${firstName}! ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§∏‡•Å‡§ó‡§Æ ‡§ó‡§∞‡•ç‡§≠ ‡§Æ‡•á‡§Ç‡•§

‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡•Ä‡•§

‚ö†Ô∏è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ:
‚Ä¢ ‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à, ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§®‡§π‡•Ä‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§§‡•á ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç

‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§® ‡§∂‡§∞‡•ç‡§§‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•à‡§Ç?`;

            options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‡§π‡§æ‡§Å, ‡§Æ‡•à‡§Ç ‡§∏‡§π‡§Æ‡§§ ‡§π‡•Ç‡§Å ‚úÖ', callback_data: 'consent_yes' },
                            { text: '‡§®‡§π‡•Ä‡§Ç ‚ùå', callback_data: 'consent_no' }
                        ]
                    ]
                }
            };
        }

        await this.bot.sendMessage(chatId, consentMessage, options);
    }

    async sendWelcomeBackMessage(chatId, firstName, language = 'hindi') {
        const user = await User.findOne({ telegramId: chatId.toString() });
        const currentWeek = calculatePregnancyWeek(user.dueDate);

        let message;
        if (language === 'english') {
            message = `üôè Welcome back ${firstName}!

You are currently in week ${currentWeek} of your pregnancy.

You can ask me about any of these topics:
‚Ä¢ Constipation
‚Ä¢ Vaccination
‚Ä¢ Diet
‚Ä¢ Anxiety
‚Ä¢ Exercise

Or type /help for more information.`;
        } else {
            message = `üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ${firstName}! ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§

‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡§æ ${currentWeek}‡§µ‡§æ‡§Ç ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§

‡§Ü‡§™ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç:
‚Ä¢ ‡§ï‡§¨‡•ç‡§ú
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£
‚Ä¢ ‡§Ü‡§π‡§æ‡§∞
‚Ä¢ ‡§ö‡§ø‡§Ç‡§§‡§æ
‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ

‡§Ø‡§æ /help ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è‡•§`;
        }

        await this.bot.sendMessage(chatId, message);
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;

        // Skip if it's a command we've already handled
        if (text === '/start' || text === '‡§ó‡§∞‡•ç‡§≠') return;

        try {
            const userState = this.userStates.get(chatId);
            const currentState = userState?.state || userState;
            const language = userState?.language || 'hindi';

            // Handle due date input
            if (currentState === 'awaiting_due_date') {
                await this.handleDueDateInput(chatId, text, msg.from, language);
                return;
            }

            // Handle additional info input
            if (currentState === 'awaiting_additional_info') {
                await this.handleAdditionalInfo(chatId, text, language);
                return;
            }

            // Handle health details input
            if (currentState === 'awaiting_health_details') {
                await this.handleHealthDetails(chatId, text, language);
                return;
            }

            // Handle keyword-based queries
            await this.handleKeywordQuery(chatId, text);

        } catch (error) {
            console.error('Error in handleMessage:', error);
            const userState = this.userStates.get(chatId);
            const language = userState?.language || 'hindi';
            
            if (language === 'english') {
                await this.bot.sendMessage(chatId, 'Sorry, there was an error. Please try again later.');
            } else {
                await this.bot.sendMessage(chatId, 'Kshama karen, kuch truti hui hai. Kripaya baad mein punah prayas karen.');
            }
        }
    }

    async handleCallbackQuery(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        const firstName = callbackQuery.from.first_name || 'Sister';

        try {
            if (data === 'lang_hindi') {
                this.userStates.set(chatId, { language: 'hindi' });
                await this.sendConsentMessage(chatId, firstName, 'hindi');
            } else if (data === 'lang_english') {
                this.userStates.set(chatId, { language: 'english' });
                await this.sendConsentMessage(chatId, firstName, 'english');
            } else if (data === 'consent_yes') {
                const userState = this.userStates.get(chatId) || { language: 'hindi' };
                await this.requestDueDate(chatId, userState.language);
            } else if (data === 'consent_no') {
                const userState = this.userStates.get(chatId) || { language: 'hindi' };
                if (userState.language === 'english') {
                    await this.bot.sendMessage(chatId, 'Understood. If you want to change your mind, type /start again.');
                } else {
                    await this.bot.sendMessage(chatId, '‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ‡•§ ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§¨‡§¶‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•Ä ‡§π‡•à‡§Ç ‡§§‡•ã /start ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§');
                }
            } else if (data.startsWith('feedback_')) {
                await this.handleFeedback(chatId, data, callbackQuery.from.id);
            } else if (data.startsWith('health_')) {
                await this.handleHealthCheck(chatId, data, callbackQuery.from.id);
            }

            // Answer the callback query
            await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('Error in handleCallbackQuery:', error);
        }
    }

    async requestDueDate(chatId, language = 'hindi') {
        const currentState = this.userStates.get(chatId) || {};
        this.userStates.set(chatId, { ...currentState, state: 'awaiting_due_date', language });

        let message;
        if (language === 'english') {
            message = `Please provide your conception date (DD/MM/YYYY format):

Example: 15/02/2024

If you don't remember the exact date, please provide your last period date.`;
        } else {
            message = `‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§ó‡§∞‡•ç‡§≠ ‡§ß‡§æ‡§∞‡§£ ‡§ï‡•Ä ‡§§‡§ø‡§•‡§ø ‡§¨‡§§‡§æ‡§è‡§Ç (DD/MM/YYYY ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç):

‡§â‡§¶‡§æ‡§π‡§∞‡§£: 15/02/2024

‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§ü‡•Ä‡§ï ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§Ø‡§æ‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§ß‡§∞‡•ç‡§Æ ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§`;
        }

        await this.bot.sendMessage(chatId, message);
    }

    async handleDueDateInput(chatId, text, userInfo, language = 'hindi') {
        const dueDate = parseDate(text);

        if (!dueDate || !isValidDate(dueDate)) {
            if (language === 'english') {
                await this.bot.sendMessage(chatId, 'Please provide date in correct format (DD/MM/YYYY)\nExample: 15/08/2024');
            } else {
                await this.bot.sendMessage(chatId, 'Kripaya sahi format mein tithi den (DD/MM/YYYY)\nUdaharan: 15/08/2024');
            }
            return;
        }

        // Check if conception date is reasonable (should be in the past, within last 10 months)
        const { isValidConceptionDate } = require('../utils/dateUtils');
        
        if (!isValidConceptionDate(dueDate)) {
            if (language === 'english') {
                await this.bot.sendMessage(chatId, 'Please provide a valid conception date (in the past and within last 10 months).\nExample: 15/08/2024');
            } else {
                await this.bot.sendMessage(chatId, 'Kripaya ek vaidh garbh dharan tithi den (aaj se pehle aur pichhle 10 mahine ke beech). \nUdaharan: 15/08/2024');
            }
            return;
        }

        // Save user data
        try {
            const user = new User({
                telegramId: chatId.toString(),
                firstName: userInfo.first_name || (language === 'english' ? 'User' : '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ'),
                username: userInfo.username,
                dueDate: dueDate,
                consentGiven: true,
                language: language
            });

            await user.save();

            const currentWeek = calculatePregnancyWeek(dueDate);
            const formattedDate = dueDate.toLocaleDateString('hi-IN');

            const currentState = this.userStates.get(chatId) || {};
            this.userStates.set(chatId, { ...currentState, state: 'awaiting_additional_info', language });

            let message;
            if (language === 'english') {
                message = `‚úÖ Thank you! Your conception date ${formattedDate} has been saved securely.

You are currently in week ${currentWeek} of your pregnancy.

Now please provide some additional information (optional):
‚Ä¢ Your age
‚Ä¢ Your city/town
‚Ä¢ Is this your first pregnancy?

Or type "Skip" if you don't want to provide this information.`;
            } else {
                message = `‚úÖ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠ ‡§ß‡§æ‡§∞‡§£ ‡§§‡§ø‡§•‡§ø ${formattedDate} ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞ ‡§≤‡•Ä ‡§ó‡§à ‡§π‡•à‡•§

‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡§æ ${currentWeek}‡§µ‡§æ‡§Ç ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§

‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï):
‚Ä¢ ‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞
‚Ä¢ ‡§Ü‡§™‡§ï‡§æ ‡§∂‡§π‡§∞/‡§ó‡§æ‡§Ç‡§µ
‚Ä¢ ‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§π‡•à?

‡§Ø‡§æ "Skip" ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•Ä‡•§`;
            }

            await this.bot.sendMessage(chatId, message);

        } catch (error) {
            console.error('Error saving user:', error);
            if (language === 'english') {
                await this.bot.sendMessage(chatId, 'Error saving data. Please try again.');
            } else {
                await this.bot.sendMessage(chatId, 'Data save karne mein truti hui. Kripaya punah prayas karen.');
            }
        }
    }

    async handleAdditionalInfo(chatId, text, language = 'hindi') {
        if (text.toLowerCase() === 'skip' || text.toLowerCase() === '‡§õ‡•ã‡§°‡§º‡•á‡§Ç') {
            await this.completeRegistration(chatId, language);
            return;
        }

        // Parse additional information (basic parsing)
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user) return;

        // Simple parsing for age (look for numbers)
        const ageMatch = text.match(/(\d+)/);
        if (ageMatch) {
            user.age = parseInt(ageMatch[1]);
        }

        // Store location (everything else)
        if (text.length > 0 && !text.match(/^\d+$/)) {
            user.location = text;
        }

        await user.save();
        await this.completeRegistration(chatId, language);
    }

    async completeRegistration(chatId, language = 'hindi') {
        this.userStates.delete(chatId);

        let message;
        if (language === 'english') {
            message = `üéâ Registration complete!

You will now receive weekly pregnancy information.

You can ask me about any of these topics anytime:
‚Ä¢ Constipation
‚Ä¢ Vaccination
‚Ä¢ Diet
‚Ä¢ Anxiety
‚Ä¢ Exercise
‚Ä¢ Headache
‚Ä¢ Vomiting

Stay healthy! ü§±`;
        } else {
            message = `üéâ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!

‡§Ö‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§π‡§∞ ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§

‡§Ü‡§™ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§®‡§ø‡§Æ‡•ç‡§® ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç:
‚Ä¢ ‡§ï‡§¨‡•ç‡§ú
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£
‚Ä¢ ‡§Ü‡§π‡§æ‡§∞
‚Ä¢ ‡§ö‡§ø‡§Ç‡§§‡§æ
‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ
‚Ä¢ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶
‚Ä¢ ‡§â‡§≤‡•ç‡§ü‡•Ä

‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§∞‡§π‡•á‡§Ç! ü§±`;
        }

        await this.bot.sendMessage(chatId, message);

        // Send current week info immediately
        await this.pregnancyService.sendCurrentWeekInfo(this.bot, chatId);
    }

    async handleKeywordQuery(chatId, text) {
        // Get user's language preference
        const user = await User.findOne({ telegramId: chatId.toString() });
        const language = user?.language || 'hindi';
        
        // Always use user's preferred language, regardless of input text language
        const response = this.keywordService.getResponse(text, language);

        if (response) {
            let options;
            if (language === 'english') {
                options = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'Yes, helpful ‚úÖ', callback_data: 'feedback_yes' },
                                { text: 'No, not helpful ‚ùå', callback_data: 'feedback_no' }
                            ]
                        ]
                    }
                };
            } else {
                options = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‡§π‡§æ‡§Å, ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§•‡§æ ‚úÖ', callback_data: 'feedback_yes' },
                                { text: '‡§®‡§π‡•Ä‡§Ç, ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§•‡§æ ‚ùå', callback_data: 'feedback_no' }
                            ]
                        ]
                    }
                };
            }

            await this.bot.sendMessage(chatId, response, options);
        } else {
            let helpMessage;
            if (language === 'english') {
                helpMessage = `I can provide information on the following topics:

‚Ä¢ Constipation
‚Ä¢ Vaccination
‚Ä¢ Diet
‚Ä¢ Anxiety
‚Ä¢ Exercise
‚Ä¢ Headache
‚Ä¢ Vomiting
‚Ä¢ Blood Pressure
‚Ä¢ Diabetes
‚Ä¢ Sleep

Please type one of these words.`;
            } else {
                helpMessage = `‡§Æ‡•à‡§Ç ‡§®‡§ø‡§Æ‡•ç‡§® ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å:

‚Ä¢ ‡§ï‡§¨‡•ç‡§ú
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£
‚Ä¢ ‡§Ü‡§π‡§æ‡§∞
‚Ä¢ ‡§ö‡§ø‡§Ç‡§§‡§æ
‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ
‚Ä¢ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶
‚Ä¢ ‡§â‡§≤‡•ç‡§ü‡•Ä
‚Ä¢ ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™
‚Ä¢ ‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π
‚Ä¢ ‡§®‡•Ä‡§Ç‡§¶

‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§®‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§è‡§ï ‡§∂‡§¨‡•ç‡§¶ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§`;
            }

            await this.bot.sendMessage(chatId, helpMessage);
        }
    }

    async handleFeedback(chatId, data, userId) {
        const helpful = data === 'feedback_yes';

        try {
            const user = await User.findOne({ telegramId: chatId.toString() });
            const language = user?.language || 'hindi';

            await User.updateOne(
                { telegramId: chatId.toString() },
                { 
                    $push: { 
                        feedback: { 
                            helpful: helpful,
                            timestamp: new Date()
                        } 
                    } 
                }
            );

            let thankYouMessage;
            if (language === 'english') {
                thankYouMessage = helpful ? 
                    'Thank you! Your feedback is valuable to us. üôè' :
                    'Thank you! We will try to improve. üôè';
            } else {
                thankYouMessage = helpful ? 
                    '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ üôè' :
                    '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§π‡§Æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ üôè';
            }

            await this.bot.sendMessage(chatId, thankYouMessage);
        } catch (error) {
            console.error('Error saving feedback:', error);
            const user = await User.findOne({ telegramId: chatId.toString() });
            const language = user?.language || 'hindi';
            
            const errorMessage = language === 'english' ? 
                'Sorry, there was an error. Please try again later.' :
                '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§';
                
            await this.bot.sendMessage(chatId, errorMessage);
        }
    }

    async handleHealthCheck(chatId, data, userId) {
        try {
            const user = await User.findOne({ telegramId: chatId.toString() });
            const language = user?.language || 'hindi';

            if (data === 'health_good') {
                let message;
                if (language === 'english') {
                    message = `‚úÖ Great! You are healthy.

Remember:
‚Ä¢ Regular doctor check-ups
‚Ä¢ Nutritious diet
‚Ä¢ Good sleep
‚Ä¢ Light exercise

If you have any problems, always consult your doctor! ü©∫`;
                } else {
                    message = `‚úÖ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ! ‡§Ü‡§™ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§π‡•à‡§Ç‡•§

‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç:
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç
‚Ä¢ ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§Ç
‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç
‚Ä¢ ‡§π‡§≤‡•ç‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç

‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§§‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç! ü©∫`;
                }

                await this.bot.sendMessage(chatId, message);
            } else if (data === 'health_issues') {
                this.userStates.set(chatId, 'awaiting_health_details');
                
                let message;
                if (language === 'english') {
                    message = `ü§ï What problems are you having? Please describe in detail:

Such as:
‚Ä¢ Headache
‚Ä¢ Vomiting
‚Ä¢ Stomach pain
‚Ä¢ Weakness
‚Ä¢ Fever
‚Ä¢ Any other problem

I will try to help you, but remember - if there are any serious symptoms, immediately consult a doctor! üö®`;
                } else {
                    message = `ü§ï ‡§ï‡•ç‡§Ø‡§æ ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à? ‡§ï‡•É‡§™‡§Ø‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç:

‡§ú‡•à‡§∏‡•á:
‚Ä¢ ‡§∏‡§ø‡§∞ ‡§¶‡§∞‡•ç‡§¶
‚Ä¢ ‡§â‡§≤‡•ç‡§ü‡•Ä
‚Ä¢ ‡§™‡•á‡§ü ‡§¶‡§∞‡•ç‡§¶
‚Ä¢ ‡§ï‡§Æ‡§ú‡•ã‡§∞‡•Ä
‚Ä¢ ‡§¨‡•Å‡§ñ‡§æ‡§∞
‚Ä¢ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ

‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡•Ä, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç - ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§π‡•à ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç! üö®`;
                }

                await this.bot.sendMessage(chatId, message);
            }

            // Save health status
            await User.updateOne(
                { telegramId: chatId.toString() },
                { 
                    $push: { 
                        healthChecks: { 
                            status: data === 'health_good' ? 'good' : 'issues',
                            timestamp: new Date()
                        } 
                    } 
                }
            );

        } catch (error) {
            console.error('Error handling health check:', error);
            await this.bot.sendMessage(chatId, 'Kshama karen, kuch truti hui hai. Kripaya baad mein punah prayas karen.');
        }
    }

    async handleHealthDetails(chatId, text) {
        this.userStates.delete(chatId);

        try {
            const user = await User.findOne({ telegramId: chatId.toString() });
            const language = user?.language || 'hindi';

            // Save health details
            await User.updateOne(
                { telegramId: chatId.toString() },
                { 
                    $push: { 
                        healthChecks: { 
                            status: 'issues',
                            details: text,
                            timestamp: new Date()
                        } 
                    } 
                }
            );

            // Provide basic advice based on common symptoms
            let response;
            const lowText = text.toLowerCase();
            
            if (language === 'english') {
                response = `ü©∫ Your concern: "${text}"\n\n`;
                
                if (lowText.includes('sir') || lowText.includes('headache') || lowText.includes('dard')) {
                    response += `üíä For headache:\n‚Ä¢ Drink plenty of water\n‚Ä¢ Take rest\n‚Ä¢ Apply cold compress\n‚Ä¢ Reduce stress\n\n`;
                }
                
                if (lowText.includes('ulti') || lowText.includes('vomit') || lowText.includes('nausea')) {
                    response += `ü§¢ For vomiting:\n‚Ä¢ Eat small amounts\n‚Ä¢ Drink ginger tea\n‚Ä¢ Have lemon water\n‚Ä¢ Eat dry biscuits\n\n`;
                }
                
                if (lowText.includes('kabz') || lowText.includes('constipation')) {
                    response += `üöΩ For constipation:\n‚Ä¢ Eat fiber-rich food\n‚Ä¢ Drink more water\n‚Ä¢ Light exercise\n‚Ä¢ Eat papaya, banana\n\n`;
                }
                
                if (lowText.includes('kamjor') || lowText.includes('weak') || lowText.includes('thak')) {
                    response += `üò¥ For weakness:\n‚Ä¢ Get good sleep\n‚Ä¢ Eat iron-rich food\n‚Ä¢ Take vitamin supplements\n‚Ä¢ Rest more\n\n`;
                }

                response += `‚ö†Ô∏è <b>Important:</b> If symptoms worsen or you have high fever, bleeding, severe pain, contact doctor IMMEDIATELY!\n\nüì± Emergency: 102 (Ambulance)`;
            } else {
                response = `ü©∫ ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä: "${text}"\n\n`;
                
                if (lowText.includes('sir') || lowText.includes('headache') || lowText.includes('dard')) {
                    response += `üíä ‡§∏‡§ø‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§†‡§Ç‡§°‡§æ ‡§∏‡•á‡§ï‡§æ‡§à ‡§≤‡§ó‡§æ‡§è‡§Ç\n‚Ä¢ ‡§§‡§®‡§æ‡§µ ‡§ï‡§Æ ‡§∞‡§ñ‡•á‡§Ç\n\n`;
                }
                
                if (lowText.includes('ulti') || lowText.includes('vomit') || lowText.includes('nausea')) {
                    response += `ü§¢ ‡§â‡§≤‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§•‡•ã‡§°‡§º‡§æ-‡§•‡•ã‡§°‡§º‡§æ ‡§ñ‡§æ‡§è‡§Ç\n‚Ä¢ ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡•Ä ‡§ö‡§æ‡§Ø ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§®‡•Ä‡§Ç‡§¨‡•Ç ‡§™‡§æ‡§®‡•Ä ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§∏‡•Ç‡§ñ‡•á ‡§¨‡§ø‡§∏‡•ç‡§ï‡•Å‡§ü ‡§ñ‡§æ‡§è‡§Ç\n\n`;
                }
                
                if (lowText.includes('kabz') || lowText.includes('constipation')) {
                    response += `üöΩ ‡§ï‡§¨‡•ç‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§´‡§æ‡§á‡§¨‡§∞ ‡§µ‡§æ‡§≤‡§æ ‡§ñ‡§æ‡§®‡§æ ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§π‡§≤‡•ç‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§™‡§™‡•Ä‡§§‡§æ, ‡§ï‡•á‡§≤‡§æ ‡§ñ‡§æ‡§è‡§Ç\n\n`;
                }
                
                if (lowText.includes('kamjor') || lowText.includes('weak') || lowText.includes('thak')) {
                    response += `üò¥ ‡§ï‡§Æ‡§ú‡•ã‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§Ü‡§Ø‡§∞‡§® ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§≠‡•ã‡§ú‡§® ‡§ñ‡§æ‡§è‡§Ç\n‚Ä¢ ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§∏‡§™‡•ç‡§≤‡•Ä‡§Æ‡•á‡§Ç‡§ü ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n\n`;
                }

                response += `‚ö†Ô∏è <b>‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£:</b> ‡§Ø‡§¶‡§ø ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§¢‡§º‡§§‡•á ‡§∞‡§π‡•á‡§Ç ‡§Ø‡§æ ‡§§‡•á‡§ú ‡§¨‡•Å‡§ñ‡§æ‡§∞, ‡§ñ‡•Ç‡§® ‡§Ü‡§®‡§æ, ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§¶‡§∞‡•ç‡§¶ ‡§π‡•ã ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç!\n\nüì± ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: 102 (‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏)`;
            }

            let options;
            if (language === 'english') {
                options = {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'Helpful ‚úÖ', callback_data: 'feedback_yes' },
                                { text: 'Need doctor üè•', callback_data: 'need_doctor' }
                            ]
                        ]
                    }
                };
            } else {
                options = {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§•‡§æ ‚úÖ', callback_data: 'feedback_yes' },
                                { text: '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§®‡§æ ‡§π‡•à üè•', callback_data: 'need_doctor' }
                            ]
                        ]
                    }
                };
            }

            await this.bot.sendMessage(chatId, response, options);

        } catch (error) {
            console.error('Error handling health details:', error);
            const user = await User.findOne({ telegramId: chatId.toString() });
            const language = user?.language || 'hindi';
            
            const errorMessage = language === 'english' ? 
                'Sorry, there was an error. Please try again later.' :
                '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§';
                
            await this.bot.sendMessage(chatId, errorMessage);
        }
    }
}

module.exports = BotService;