const User = require('../models/User');
const PregnancyService = require('./pregnancyService');
const KeywordService = require('./keywordService');
const { calculatePregnancyWeek, isValidDate, parseDate } = require('../utils/dateUtils');

class BotService {
    constructor(bot) {
        this.bot = bot;
        this.pregnancyService = new PregnancyService();
        this.keywordService = new KeywordService();
        this.userStates = new Map(); // Track user conversation states
    }

    initializeHandlers() {
        // Handle /start command
        this.bot.onText(/\/start/, this.handleStart.bind(this));
        
        // Handle "‡§ó‡§∞‡•ç‡§≠" keyword
        this.bot.onText(/‡§ó‡§∞‡•ç‡§≠/, this.handleGarbh.bind(this));
        
        // Handle all text messages
        this.bot.on('message', this.handleMessage.bind(this));
        
        // Handle callback queries (Yes/No feedback)
        this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
    }

    async handleStart(msg) {
        const chatId = msg.chat.id;
        const firstName = msg.from.first_name || '‡§¨‡§π‡§® ‡§ú‡•Ä';
        
        try {
            // Check if user already exists
            const existingUser = await User.findOne({ telegramId: chatId.toString() });
            
            if (existingUser) {
                await this.sendWelcomeBackMessage(chatId, firstName);
                return;
            }
            
            await this.sendConsentMessage(chatId, firstName);
        } catch (error) {
            console.error('Error in handleStart:', error);
            await this.bot.sendMessage(chatId, '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§');
        }
    }

    async handleGarbh(msg) {
        await this.handleStart(msg);
    }

    async sendConsentMessage(chatId, firstName) {
        const consentMessage = `üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ${firstName}! ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à ‡§∏‡•Å‡§ó‡§Æ ‡§ó‡§∞‡•ç‡§≠ ‡§Æ‡•á‡§Ç‡•§

‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•á ‡§¶‡•å‡§∞‡§æ‡§® ‡§∏‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡•Ä‡•§

‚ö†Ô∏è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ:
‚Ä¢ ‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à, ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π ‡§®‡§π‡•Ä‡§Ç
‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§§‡•á ‡§∞‡§π‡•á‡§Ç
‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç

‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§® ‡§∂‡§∞‡•ç‡§§‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•à‡§Ç?`;

        const options = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‡§π‡§æ‡§Å, ‡§Æ‡•à‡§Ç ‡§∏‡§π‡§Æ‡§§ ‡§π‡•Ç‡§Å ‚úÖ', callback_data: 'consent_yes' },
                        { text: '‡§®‡§π‡•Ä‡§Ç ‚ùå', callback_data: 'consent_no' }
                    ]
                ]
            }
        };

        await this.bot.sendMessage(chatId, consentMessage, options);
    }

    async sendWelcomeBackMessage(chatId, firstName) {
        const user = await User.findOne({ telegramId: chatId.toString() });
        const currentWeek = calculatePregnancyWeek(user.dueDate);
        
        const message = `üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ${firstName}! ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§

‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡§æ ${currentWeek}‡§µ‡§æ‡§Ç ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§

‡§Ü‡§™ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç:
‚Ä¢ ‡§ï‡§¨‡•ç‡§ú‡§º
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£
‚Ä¢ ‡§Ü‡§π‡§æ‡§∞
‚Ä¢ ‡§ö‡§ø‡§Ç‡§§‡§æ
‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ

‡§Ø‡§æ /help ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è‡•§`;

        await this.bot.sendMessage(chatId, message);
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;
        
        // Skip if it's a command we've already handled
        if (text === '/start' || text === '‡§ó‡§∞‡•ç‡§≠') return;
        
        try {
            const userState = this.userStates.get(chatId);
            
            // Handle due date input
            if (userState === 'awaiting_due_date') {
                await this.handleDueDateInput(chatId, text, msg.from);
                return;
            }
            
            // Handle additional info input
            if (userState === 'awaiting_additional_info') {
                await this.handleAdditionalInfo(chatId, text);
                return;
            }
            
            // Handle keyword-based queries
            await this.handleKeywordQuery(chatId, text);
            
        } catch (error) {
            console.error('Error in handleMessage:', error);
            await this.bot.sendMessage(chatId, '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§ï‡•Å‡§õ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§');
        }
    }

    async handleCallbackQuery(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const data = callbackQuery.data;
        
        try {
            if (data === 'consent_yes') {
                await this.requestDueDate(chatId);
            } else if (data === 'consent_no') {
                await this.bot.sendMessage(chatId, '‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ‡•§ ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§¨‡§¶‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•Ä ‡§π‡•à‡§Ç ‡§§‡•ã /start ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§');
            } else if (data.startsWith('feedback_')) {
                await this.handleFeedback(chatId, data, callbackQuery.from.id);
            }
            
            // Answer the callback query
            await this.bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('Error in handleCallbackQuery:', error);
        }
    }

    async requestDueDate(chatId) {
        this.userStates.set(chatId, 'awaiting_due_date');
        
        const message = `‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§™‡•ç‡§∞‡§∏‡§µ ‡§§‡§ø‡§•‡§ø ‡§¨‡§§‡§æ‡§è‡§Ç (DD/MM/YYYY ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç):

‡§â‡§¶‡§æ‡§π‡§∞‡§£: 15/08/2024`;

        await this.bot.sendMessage(chatId, message);
    }

    async handleDueDateInput(chatId, text, userInfo) {
        const dueDate = parseDate(text);
        
        if (!dueDate || !isValidDate(dueDate)) {
            await this.bot.sendMessage(chatId, '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§π‡•Ä ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§§‡§ø‡§•‡§ø ‡§¶‡•á‡§Ç (DD/MM/YYYY)\n‡§â‡§¶‡§æ‡§π‡§∞‡§£: 15/08/2024');
            return;
        }
        
        // Check if due date is reasonable (between now and 10 months from now)
        const now = new Date();
        const maxDate = new Date(now.getTime() + (10 * 30 * 24 * 60 * 60 * 1000));
        
        if (dueDate < now || dueDate > maxDate) {
            await this.bot.sendMessage(chatId, '‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§ß ‡§™‡•ç‡§∞‡§∏‡§µ ‡§§‡§ø‡§•‡§ø ‡§¶‡•á‡§Ç (‡§Ü‡§ú ‡§∏‡•á 10 ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡•á ‡§¨‡•Ä‡§ö)‡•§');
            return;
        }
        
        // Save user data
        try {
            const user = new User({
                telegramId: chatId.toString(),
                firstName: userInfo.first_name || '‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ',
                username: userInfo.username,
                dueDate: dueDate,
                consentGiven: true
            });
            
            await user.save();
            
            const currentWeek = calculatePregnancyWeek(dueDate);
            const formattedDate = dueDate.toLocaleDateString('hi-IN');
            
            this.userStates.set(chatId, 'awaiting_additional_info');
            
            const message = `‚úÖ ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§∏‡§µ ‡§§‡§ø‡§•‡§ø ${formattedDate} ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞ ‡§≤‡•Ä ‡§ó‡§à ‡§π‡•à‡•§

‡§Ü‡§™‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡§æ ${currentWeek}‡§µ‡§æ‡§Ç ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§

‡§Ö‡§¨ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï):
‚Ä¢ ‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞
‚Ä¢ ‡§Ü‡§™‡§ï‡§æ ‡§∂‡§π‡§∞/‡§ó‡§æ‡§Ç‡§µ
‚Ä¢ ‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§π‡§≤‡•Ä ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§π‡•à?

‡§Ø‡§æ "‡§õ‡•ã‡§°‡§º‡•á‡§Ç" ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•Ä‡•§`;

            await this.bot.sendMessage(chatId, message);
            
        } catch (error) {
            console.error('Error saving user:', error);
            await this.bot.sendMessage(chatId, '‡§°‡•á‡§ü‡§æ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§');
        }
    }

    async handleAdditionalInfo(chatId, text) {
        if (text.toLowerCase() === '‡§õ‡•ã‡§°‡§º‡•á‡§Ç' || text.toLowerCase() === 'skip') {
            await this.completeRegistration(chatId);
            return;
        }
        
        // Parse additional information (basic parsing)
        const user = await User.findOne({ telegramId: chatId.toString() });
        if (!user) return;
        
        // Simple parsing for age (look for numbers)
        const ageMatch = text.match(/(\d+)/);
        if (ageMatch) {
            user.age = parseInt(ageMatch[1]);
        }
        
        // Store location (everything else)
        if (text.length > 0 && !text.match(/^\d+$/)) {
            user.location = text;
        }
        
        await user.save();
        await this.completeRegistration(chatId);
    }

    async completeRegistration(chatId) {
        this.userStates.delete(chatId);
        
        const message = `üéâ ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!

‡§Ö‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§π‡§∞ ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§ó‡§∞‡•ç‡§≠‡§æ‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§

‡§Ü‡§™ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§®‡§ø‡§Æ‡•ç‡§® ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡§Ç:
‚Ä¢ ‡§ï‡§¨‡•ç‡§ú‡§º
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£  
‚Ä¢ ‡§Ü‡§π‡§æ‡§∞
‚Ä¢ ‡§ö‡§ø‡§Ç‡§§‡§æ
‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ
‚Ä¢ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶
‚Ä¢ ‡§â‡§≤‡•ç‡§ü‡•Ä

‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§∞‡§π‡•á‡§Ç! ü§±`;

        await this.bot.sendMessage(chatId, message);
        
        // Send current week info immediately
        await this.pregnancyService.sendCurrentWeekInfo(this.bot, chatId);
    }

    async handleKeywordQuery(chatId, text) {
        const response = this.keywordService.getResponse(text);
        
        if (response) {
            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‡§π‡§æ‡§Å, ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§•‡§æ ‚úÖ', callback_data: 'feedback_yes' },
                            { text: '‡§®‡§π‡•Ä‡§Ç, ‡§â‡§™‡§Ø‡•ã‡§ó‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§•‡§æ ‚ùå', callback_data: 'feedback_no' }
                        ]
                    ]
                }
            };
            
            await this.bot.sendMessage(chatId, response, options);
        } else {
            const helpMessage = `‡§Æ‡•à‡§Ç ‡§®‡§ø‡§Æ‡•ç‡§® ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§™‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å:

‚Ä¢ ‡§ï‡§¨‡•ç‡§ú‡§º
‚Ä¢ ‡§ü‡•Ä‡§ï‡§æ‡§ï‡§∞‡§£
‚Ä¢ ‡§Ü‡§π‡§æ‡§∞
‚Ä¢ ‡§ö‡§ø‡§Ç‡§§‡§æ  
‚Ä¢ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ
‚Ä¢ ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶
‚Ä¢ ‡§â‡§≤‡•ç‡§ü‡•Ä
‚Ä¢ ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™
‚Ä¢ ‡§°‡§æ‡§Ø‡§¨‡§ø‡§ü‡•Ä‡§ú
‚Ä¢ ‡§®‡•Ä‡§Ç‡§¶

‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§®‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ï‡•ã‡§à ‡§è‡§ï ‡§∂‡§¨‡•ç‡§¶ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§`;

            await this.bot.sendMessage(chatId, helpMessage);
        }
    }

    async handleFeedback(chatId, data, userId) {
        const helpful = data === 'feedback_yes';
        
        try {
            await User.updateOne(
                { telegramId: chatId.toString() },
                { 
                    $push: { 
                        feedback: { 
                            helpful: helpful,
                            timestamp: new Date()
                        } 
                    } 
                }
            );
            
            const thankYouMessage = helpful ? 
                '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§≤‡§ø‡§è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§ üôè' :
                '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§π‡§Æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§¨‡§®‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§ üôè';
            
            await this.bot.sendMessage(chatId, thankYouMessage);
        } catch (error) {
            console.error('Error saving feedback:', error);
        }
    }
}

module.exports = BotService;
