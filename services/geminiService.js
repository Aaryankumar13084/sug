const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
    constructor() {
        this.apiKey = process.env.GEMINI_API_KEY;
        if (!this.apiKey) {
            console.warn('GEMINI_API_KEY not found in environment variables');
            this.genAI = null;
            return;
        }
        
        this.genAI = new GoogleGenerativeAI(this.apiKey);
        this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    }

    async generateResponse(prompt, language = 'hindi') {
        if (!this.genAI) {
            return language === 'english' 
                ? 'Gemini AI service is not available. Please configure GEMINI_API_KEY.'
                : 'рдЬреЗрдорд┐рдиреА AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ GEMINI_API_KEY рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдХрд░реЗрдВред';
        }

        try {
            let languageContext, fullPrompt;
            
            if (language === 'english') {
                languageContext = `You are a helpful pregnancy support assistant. Please respond ONLY in English. 
Keep your response clear, concise, and well-formatted. Use simple language that's easy to understand.
Focus on practical advice for pregnancy-related topics. Use appropriate emojis to make the response more engaging.
Format your response with clear sections using emojis like ЁЯй║, ЁЯТб, тЪая╕П, ЁЯНО, ЁЯТК, etc.`;
                fullPrompt = `${languageContext}\n\nQuestion: ${prompt}`;
            } else {
                languageContext = `рдЖрдк рдПрдХ рд╕рд╣рд╛рдпрдХ рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рд╕рд╣рд╛рдпрдХ рд╣реИрдВред рдХреГрдкрдпрд╛ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред 
рдЕрдкрдирд╛ рдЙрддреНрддрд░ рд╕реНрдкрд╖реНрдЯ, рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рдЕрдЪреНрдЫреА рддрд░рд╣ рд╕реЗ рд╕реНрд╡рд░реВрдкрд┐рдд рд░рдЦреЗрдВред рд╕рд░рд▓ рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдЬреЛ рд╕рдордЭрдиреЗ рдореЗрдВ рдЖрд╕рд╛рди рд╣реЛред
рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рд╕рдВрдмрдВрдзреА рд╡рд┐рд╖рдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ рд╕рд▓рд╛рд╣ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВред рдЙрддреНрддрд░ рдХреЛ рдЖрдХрд░реНрд╖рдХ рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рдЗрдореЛрдЬреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред
ЁЯй║, ЁЯТб, тЪая╕П, ЁЯНО, ЁЯТК, рдЖрджрд┐ рдЬреИрд╕реА рдЗрдореЛрдЬреА рдХреЗ рд╕рд╛рде рд╕реНрдкрд╖реНрдЯ рдЦрдВрдбреЛрдВ рдореЗрдВ рдЕрдкрдирд╛ рдЙрддреНрддрд░ рдкреНрд░рд╛рд░реВрдкрд┐рдд рдХрд░реЗрдВред`;
                fullPrompt = `${languageContext}\n\nрдкреНрд░рд╢реНрди: ${prompt}`;
            }
            
            const result = await this.model.generateContent(fullPrompt);
            const response = await result.response;
            let responseText = response.text();
            
            // Clean up formatting - improve bullet points and structure
            responseText = responseText
                .replace(/\*\*\*/g, '') // Remove triple asterisks
                .replace(/\*\*([^*]+)\*\*/g, 'ЁЯУМ $1') // Convert **text** to ЁЯУМ text
                .replace(/\*([^*]+)\*/g, 'тАв $1') // Convert *text* to bullet points
                .replace(/\n\s*\n\s*\n/g, '\n\n') // Remove excessive line breaks
                .replace(/тАв тАв/g, 'тАв') // Fix double bullet points
                .trim();
            
            return responseText;
        } catch (error) {
            console.error('Error generating Gemini response:', error);
            return language === 'english' 
                ? 'Sorry, I could not generate a response at this moment. Please try again later.'
                : 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рдЗрд╕ рд╕рдордп рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред';
        }
    }

    isAvailable() {
        return this.genAI !== null;
    }
}

module.exports = GeminiService;