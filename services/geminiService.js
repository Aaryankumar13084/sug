const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
    constructor() {
        this.apiKey = process.env.GEMINI_API_KEY;
        if (!this.apiKey) {
            console.warn('GEMINI_API_KEY not found in environment variables');
            this.genAI = null;
            return;
        }
        
        this.genAI = new GoogleGenerativeAI(this.apiKey);
        this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    }

    async generateResponse(prompt, language = 'hindi') {
        if (!this.genAI) {
            return language === 'english' 
                ? 'Gemini AI service is not available. Please configure GEMINI_API_KEY.'
                : 'рдЬреЗрдорд┐рдиреА AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ GEMINI_API_KEY рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдХрд░реЗрдВред';
        }

        try {
            let languageContext, fullPrompt;
            
            if (language === 'english') {
                languageContext = `You are a helpful pregnancy support assistant. Please respond ONLY in English.

FORMATTING REQUIREMENTS:
- Write in clear paragraphs with proper line breaks
- Add a blank line between each paragraph 
- Start each main section with ONE emoji (ЁЯй║, ЁЯТб, тЪая╕П, ЁЯНО, or ЁЯТК) followed by text
- Use bullet points (тАв) for lists, each on a new line
- Keep paragraphs 2-3 sentences maximum
- Add proper spacing between sections
- Use natural paragraph breaks for readability

Example format:
ЁЯй║ Medical Information
This is a paragraph about medical advice. It should be clear and concise.

ЁЯТб Tips and Suggestions  
Here are some helpful tips. Each point should be easy to read.

тАв First tip here
тАв Second tip here
тАв Third tip here

Provide helpful pregnancy guidance with proper spacing.`;
                fullPrompt = `${languageContext}\n\nQuestion: ${prompt}`;
            } else {
                languageContext = `рдЖрдк рдПрдХ рд╕рд╣рд╛рдпрдХ рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рд╕рд╣рд╛рдпрдХ рд╣реИрдВред рдХреГрдкрдпрд╛ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред

рдлреЙрд░реНрдореЗрдЯрд┐рдВрдЧ рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдВ:
- рдЙрдЪрд┐рдд рд▓рд╛рдЗрди рдмреНрд░реЗрдХ рдХреЗ рд╕рд╛рде рд╕реНрдкрд╖реНрдЯ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдореЗрдВ рд▓рд┐рдЦреЗрдВ
- рдкреНрд░рддреНрдпреЗрдХ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдХреЗ рдмреАрдЪ рдПрдХ рдЦрд╛рд▓реА рд▓рд╛рдЗрди рдЬреЛрдбрд╝реЗрдВ
- рдкреНрд░рддреНрдпреЗрдХ рдореБрдЦреНрдп рд╕реЗрдХреНрд╢рди рдХреА рд╢реБрд░реБрдЖрдд рдПрдХ рдЗрдореЛрдЬреА (ЁЯй║, ЁЯТб, тЪая╕П, ЁЯНО, рдпрд╛ ЁЯТК) рд╕реЗ рдХрд░реЗрдВ рдЙрд╕рдХреЗ рдмрд╛рдж рдЯреЗрдХреНрд╕реНрдЯ
- рд╕реВрдЪрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯ (тАв) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рдкреНрд░рддреНрдпреЗрдХ рдирдИ рд▓рд╛рдЗрди рдкрд░
- рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдЕрдзрд┐рдХрддрдо 2-3 рд╡рд╛рдХреНрдп рд░рдЦреЗрдВ
- рд╕реЗрдХреНрд╢рди рдХреЗ рдмреАрдЪ рдЙрдЪрд┐рдд рд╕реНрдкреЗрд╕рд┐рдВрдЧ рдЬреЛрдбрд╝реЗрдВ
- рдкрдврд╝рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдХреЗ рд▓рд┐рдП рдкреНрд░рд╛рдХреГрддрд┐рдХ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдмреНрд░реЗрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ

рдЙрджрд╛рд╣рд░рдг рдлреЙрд░реНрдореЗрдЯ:
ЁЯй║ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЬрд╛рдирдХрд╛рд░реА
рдпрд╣ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдПрдХ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рд╣реИред рдпрд╣ рд╕реНрдкрд╖реНрдЯ рдФрд░ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред

ЁЯТб рд╕реБрдЭрд╛рд╡ рдФрд░ рдЯрд┐рдкреНрд╕
рдпрд╣рд╛рдБ рдХреБрдЫ рдЙрдкрдпреЛрдЧреА рд╕реБрдЭрд╛рд╡ рд╣реИрдВред рдкреНрд░рддреНрдпреЗрдХ рдмрд┐рдВрджреБ рдкрдврд╝рдиреЗ рдореЗрдВ рдЖрд╕рд╛рди рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред

тАв рдкрд╣рд▓рд╛ рд╕реБрдЭрд╛рд╡ рдпрд╣рд╛рдБ
тАв рджреВрд╕рд░рд╛ рд╕реБрдЭрд╛рд╡ рдпрд╣рд╛рдБ
тАв рддреАрд╕рд░рд╛ рд╕реБрдЭрд╛рд╡ рдпрд╣рд╛рдБ

рдЙрдЪрд┐рдд рд╕реНрдкреЗрд╕рд┐рдВрдЧ рдХреЗ рд╕рд╛рде рдЙрдкрдпреЛрдЧреА рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВред`;
                fullPrompt = `${languageContext}\n\nрдкреНрд░рд╢реНрди: ${prompt}`;
            }
            
            const result = await this.model.generateContent(fullPrompt);
            const response = await result.response;
            let responseText = response.text();
            
            // Clean up formatting - improve structure and readability with proper line spacing
            responseText = responseText
                .replace(/\*\*\*/g, '') // Remove triple asterisks
                .replace(/\*\*([^*]+)\*\*/g, 'ЁЯФ╕ $1\n') // Convert **text** to ЁЯФ╕ text with line break
                .replace(/\*([^*]+)\*/g, 'тАв $1') // Convert *text* to bullet points
                .replace(/\n\s*\n\s*\n+/g, '\n\n') // Remove excessive line breaks
                .replace(/тАв тАв/g, 'тАв') // Fix double bullet points
                .replace(/ЁЯФ╕\s*ЁЯФ╕/g, 'ЁЯФ╕') // Fix double pin emojis
                .replace(/ЁЯУМ/g, 'ЁЯФ╕') // Replace any remaining pin emojis with consistent ones
                .replace(/([.!?])\s*([ЁЯФ╕ЁЯй║ЁЯТбтЪая╕ПЁЯНОЁЯТК])/g, '$1\n\n$2') // Add line breaks before section emojis
                .replace(/([.!?])\s*\n\s*([тАв])/g, '$1\nтАв ') // Proper spacing for bullet points
                .replace(/\n{3,}/g, '\n\n') // Limit to maximum 2 line breaks
                .replace(/^\s+|\s+$/gm, '') // Remove leading/trailing spaces from each line
                .replace(/([тАв])\s*([^тАв\n]+)\n(?=[тАв])/g, '$1 $2\n') // Fix bullet point spacing
                .trim();
            
            return responseText;
        } catch (error) {
            console.error('Error generating Gemini response:', error);
            return language === 'english' 
                ? 'Sorry, I could not generate a response at this moment. Please try again later.'
                : 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рдЗрд╕ рд╕рдордп рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред';
        }
    }

    isAvailable() {
        return this.genAI !== null;
    }
}

module.exports = GeminiService;