const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
    constructor() {
        this.apiKey = process.env.GEMINI_API_KEY;
        if (!this.apiKey) {
            console.warn('GEMINI_API_KEY not found in environment variables');
            this.genAI = null;
            return;
        }
        
        this.genAI = new GoogleGenerativeAI(this.apiKey);
        this.model = this.genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
    }

    async generateResponse(prompt, language = 'hindi') {
        if (!this.genAI) {
            return language === 'english' 
                ? 'Gemini AI service is not available. Please configure GEMINI_API_KEY.'
                : 'рдЬреЗрдорд┐рдиреА AI рд╕реЗрд╡рд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ GEMINI_API_KEY рдХреЙрдиреНрдлрд╝рд┐рдЧрд░ рдХрд░реЗрдВред';
        }

        try {
            let languageContext, fullPrompt;
            
            if (language === 'english') {
                languageContext = `You are a helpful pregnancy support assistant. Please respond ONLY in English.

FORMATTING RULES:
- Keep responses clear and well-organized
- Use simple, easy-to-understand language
- Start each main section with ONE emoji (ЁЯй║, ЁЯТб, тЪая╕П, ЁЯНО, or ЁЯТК)
- Use bullet points (тАв) for lists, not multiple emojis
- Keep paragraphs short and readable
- Limit emojis to section headers only
- Focus on practical, actionable advice

Provide helpful pregnancy guidance without overwhelming formatting.`;
                fullPrompt = `${languageContext}\n\nQuestion: ${prompt}`;
            } else {
                languageContext = `рдЖрдк рдПрдХ рд╕рд╣рд╛рдпрдХ рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рд╕рд╣рд╛рдпрдХ рд╣реИрдВред рдХреГрдкрдпрд╛ рдХреЗрд╡рд▓ рд╣рд┐рдВрджреА рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред

рдлреЙрд░реНрдореЗрдЯрд┐рдВрдЧ рдирд┐рдпрдо:
- рдЙрддреНрддрд░ рд╕реНрдкрд╖реНрдЯ рдФрд░ рд╡реНрдпрд╡рд╕реНрдерд┐рдд рд░рдЦреЗрдВ
- рд╕рд░рд▓, рд╕рдордЭрдиреЗ рдпреЛрдЧреНрдп рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
- рдкреНрд░рддреНрдпреЗрдХ рдореБрдЦреНрдп рд╕реЗрдХреНрд╢рди рдХреА рд╢реБрд░реБрдЖрдд рдПрдХ рдЗрдореЛрдЬреА рд╕реЗ рдХрд░реЗрдВ (ЁЯй║, ЁЯТб, тЪая╕П, ЁЯНО, рдпрд╛ ЁЯТК)
- рд╕реВрдЪрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдмреБрд▓реЗрдЯ рдкреЙрдЗрдВрдЯ (тАв) рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рдХрдИ рдЗрдореЛрдЬреА рдХрд╛ рдирд╣реАрдВ
- рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдЫреЛрдЯреЗ рдФрд░ рдкрдврд╝рдиреЗ рдпреЛрдЧреНрдп рд░рдЦреЗрдВ
- рдЗрдореЛрдЬреА рдХреЗрд╡рд▓ рд╕реЗрдХреНрд╢рди рд╣реЗрдбрд░ рддрдХ рд╕реАрдорд┐рдд рд░рдЦреЗрдВ
- рд╡реНрдпрд╛рд╡рд╣рд╛рд░рд┐рдХ, рдХрд╛рд░реНрдпрд╛рдиреНрд╡рд┐рдд рдХрд░рдиреЗ рдпреЛрдЧреНрдп рд╕рд▓рд╛рд╣ рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ

рдмрд┐рдирд╛ рдЕрддреНрдпрдзрд┐рдХ рдлреЙрд░реНрдореЗрдЯрд┐рдВрдЧ рдХреЗ рдЙрдкрдпреЛрдЧреА рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рджрд╛рди рдХрд░реЗрдВред`;
                fullPrompt = `${languageContext}\n\nрдкреНрд░рд╢реНрди: ${prompt}`;
            }
            
            const result = await this.model.generateContent(fullPrompt);
            const response = await result.response;
            let responseText = response.text();
            
            // Clean up formatting - improve structure and readability
            responseText = responseText
                .replace(/\*\*\*/g, '') // Remove triple asterisks
                .replace(/\*\*([^*]+)\*\*/g, 'ЁЯФ╕ $1') // Convert **text** to ЁЯФ╕ text (less frequent emoji)
                .replace(/\*([^*]+)\*/g, 'тАв $1') // Convert *text* to bullet points
                .replace(/\n\s*\n\s*\n+/g, '\n\n') // Remove excessive line breaks
                .replace(/тАв тАв/g, 'тАв') // Fix double bullet points
                .replace(/ЁЯФ╕\s*ЁЯФ╕/g, 'ЁЯФ╕') // Fix double pin emojis
                .replace(/ЁЯУМ/g, 'ЁЯФ╕') // Replace any remaining pin emojis with consistent ones
                .replace(/\n{3,}/g, '\n\n') // Limit to maximum 2 line breaks
                .replace(/^\s+|\s+$/gm, '') // Remove leading/trailing spaces from each line
                .trim();
            
            return responseText;
        } catch (error) {
            console.error('Error generating Gemini response:', error);
            return language === 'english' 
                ? 'Sorry, I could not generate a response at this moment. Please try again later.'
                : 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рдЗрд╕ рд╕рдордп рдЙрддреНрддрд░ рдирд╣реАрдВ рджреЗ рд╕рдХрддрд╛ред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред';
        }
    }

    isAvailable() {
        return this.genAI !== null;
    }
}

module.exports = GeminiService;