const User = require('../models/User');
const { calculatePregnancyWeek } = require('../utils/dateUtils');
const { getWeeklyContent } = require('../data/pregnancyWeeks');

class PregnancyService {
    async sendWeeklyUpdates(bot) {
        try {
            const users = await User.find({ isActive: true });
            console.log(`Checking weekly updates for ${users.length} users...`);
            
            for (const user of users) {
                await this.checkAndSendWeeklyUpdate(bot, user);
            }
        } catch (error) {
            console.error('Error in sendWeeklyUpdates:', error);
        }
    }

    async checkAndSendWeeklyUpdate(bot, user) {
        try {
            const currentWeek = calculatePregnancyWeek(user.dueDate);
            
            // Only send if this week hasn't been sent yet and it's a valid pregnancy week
            if (currentWeek > user.lastWeekSent && currentWeek >= 1 && currentWeek <= 42) {
                const content = getWeeklyContent(currentWeek);
                
                if (content) {
                    const message = this.formatWeeklyMessage(currentWeek, content);
                    
                    const options = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'рд╣рд╛рдБ, рдЙрдкрдпреЛрдЧреА рдерд╛ тЬЕ', callback_data: 'feedback_yes' },
                                    { text: 'рдирд╣реАрдВ, рдЙрдкрдпреЛрдЧреА рдирд╣реАрдВ рдерд╛ тЭМ', callback_data: 'feedback_no' }
                                ]
                            ]
                        },
                        parse_mode: 'HTML'
                    };
                    
                    await bot.sendMessage(user.telegramId, message, options);
                    
                    // Update last week sent
                    user.lastWeekSent = currentWeek;
                    await user.save();
                    
                    console.log(`Sent week ${currentWeek} update to user ${user.telegramId}`);
                }
            }
        } catch (error) {
            console.error(`Error sending update to user ${user.telegramId}:`, error);
        }
    }

    async sendCurrentWeekInfo(bot, chatId) {
        try {
            const user = await User.findOne({ telegramId: chatId.toString() });
            if (!user) return;
            
            const currentWeek = calculatePregnancyWeek(user.dueDate);
            const content = getWeeklyContent(currentWeek);
            
            if (content && currentWeek >= 1 && currentWeek <= 42) {
                const message = this.formatWeeklyMessage(currentWeek, content);
                
                const options = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'рд╣рд╛рдБ, рдЙрдкрдпреЛрдЧреА рдерд╛ тЬЕ', callback_data: 'feedback_yes' },
                                { text: 'рдирд╣реАрдВ, рдЙрдкрдпреЛрдЧреА рдирд╣реАрдВ рдерд╛ тЭМ', callback_data: 'feedback_no' }
                            ]
                        ]
                    },
                    parse_mode: 'HTML'
                };
                
                await bot.sendMessage(chatId, message, options);
                
                // Update last week sent
                user.lastWeekSent = currentWeek;
                await user.save();
            }
        } catch (error) {
            console.error('Error in sendCurrentWeekInfo:', error);
        }
    }

    formatWeeklyMessage(week, content) {
        return `ЁЯд▒ <b>рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдХрд╛ ${week}рд╡рд╛рдВ рд╕рдкреНрддрд╛рд╣</b>

ЁЯН╝ <b>рд╢рд┐рд╢реБ рдХрд╛ рд╡рд┐рдХрд╛рд╕:</b>
${content.babyDevelopment.map(point => `тАв ${point}`).join('\n')}

ЁЯСй <b>рдорд╛рдБ рдХреЗ рд╢рд░реАрд░ рдореЗрдВ рдмрджрд▓рд╛рд╡:</b>
${content.motherChanges.map(point => `тАв ${point}`).join('\n')}

ЁЯеЧ <b>рдкреЛрд╖рдг рдХреА рд╕рд▓рд╛рд╣:</b>
${content.nutrition.map(point => `тАв ${point}`).join('\n')}

тЪая╕П <b>рдЪреЗрддрд╛рд╡рдиреА рдХреЗ рд╕рдВрдХреЗрдд:</b>
${content.warningSigns.map(point => `тАв ${point}`).join('\n')}
<b>рдЗрдирдореЗрдВ рд╕реЗ рдХреЛрдИ рднреА рд▓рдХреНрд╖рдг рд╣реЛ рддреЛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ!</b>

ЁЯТб <b>рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣:</b>
${content.generalAdvice.map(point => `тАв ${point}`).join('\n')}

ЁЯУЛ <b>рдбрд┐рд╕реНрдХреНрд▓реЗрдорд░:</b> рдпрд╣ рдХреЗрд╡рд▓ рд╢рд┐рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рд╣реИред рдирд┐рдпрдорд┐рдд рдбреЙрдХреНрдЯрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рддреЗ рд░рд╣реЗрдВред

рдХреНрдпрд╛ рдпрд╣ рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрдпреЛрдЧреА рдереА?`;
    }
}

module.exports = PregnancyService;
