const User = require('../models/User');
const { calculatePregnancyWeek } = require('../utils/dateUtils');
const { getWeeklyContent } = require('../data/pregnancyWeeks');

class PregnancyService {
    async sendWeeklyUpdates(bot) {
        try {
            const users = await User.find({ isActive: true });
            console.log(`Checking weekly updates for ${users.length} users...`);

            for (const user of users) {
                await this.checkAndSendWeeklyUpdate(bot, user);
            }
        } catch (error) {
            console.error('Error in sendWeeklyUpdates:', error);
        }
    }

    async checkAndSendWeeklyUpdate(bot, user) {
        try {
            const currentWeek = calculatePregnancyWeek(user.dueDate);

            // Only send if this week hasn't been sent yet and it's a valid pregnancy week
            if (currentWeek > user.lastWeekSent && currentWeek >= 1 && currentWeek <= 42) {
                const content = getWeeklyContent(currentWeek, user.language);

                if (content) {
                    // First send weekly health check
                    await this.sendWeeklyHealthCheck(bot, user);

                    // Wait 2 seconds then send weekly pregnancy info
                    setTimeout(async () => {
                        const message = this.formatWeeklyMessage(currentWeek, content, user.language);

                        let options;
                        if (user.language === 'english') {
                            options = {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            { text: 'Yes, helpful тЬЕ', callback_data: 'feedback_yes' },
                                            { text: 'No, not helpful тЭМ', callback_data: 'feedback_no' }
                                        ]
                                    ]
                                },
                                parse_mode: 'HTML'
                            };
                        } else {
                            options = {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            { text: 'рд╣рд╛рдБ, рдЙрдкрдпреЛрдЧреА рдерд╛ тЬЕ', callback_data: 'feedback_yes' },
                                            { text: 'рдирд╣реАрдВ, рдЙрдкрдпреЛрдЧреА рдирд╣реАрдВ рдерд╛ тЭМ', callback_data: 'feedback_no' }
                                        ]
                                    ]
                                },
                                parse_mode: 'HTML'
                            };
                        }

                        await bot.sendMessage(user.telegramId, message, options);

                        console.log(`Sent week ${currentWeek} update to user ${user.telegramId}`);
                    }, 2000);

                    // Update last week sent
                    user.lastWeekSent = currentWeek;
                    await user.save();
                }
            }
        } catch (error) {
            console.error(`Error sending update to user ${user.telegramId}:`, error);
        }
    }

    async sendCurrentWeekInfo(bot, chatId) {
        try {
            const user = await User.findOne({ telegramId: chatId.toString() });
            if (!user) return;

            const currentWeek = calculatePregnancyWeek(user.dueDate);
            const content = getWeeklyContent(currentWeek, user.language);

            if (content && currentWeek >= 1 && currentWeek <= 42) {
                const message = this.formatWeeklyMessage(currentWeek, content, user.language);

                let options;
                if (user.language === 'english') {
                    options = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'Yes, helpful тЬЕ', callback_data: 'feedback_yes' },
                                    { text: 'No, not helpful тЭМ', callback_data: 'feedback_no' }
                                ]
                            ]
                        },
                        parse_mode: 'HTML'
                    };
                } else {
                    options = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'рд╣рд╛рдБ, рдЙрдкрдпреЛрдЧреА рдерд╛ тЬЕ', callback_data: 'feedback_yes' },
                                    { text: 'рдирд╣реАрдВ, рдЙрдкрдпреЛрдЧреА рдирд╣реАрдВ рдерд╛ тЭМ', callback_data: 'feedback_no' }
                                ]
                            ]
                        },
                        parse_mode: 'HTML'
                    };
                }

                await bot.sendMessage(chatId, message, options);

                // Update last week sent
                user.lastWeekSent = currentWeek;
                await user.save();
            }
        } catch (error) {
            console.error('Error in sendCurrentWeekInfo:', error);
        }
    }

    formatWeeklyMessage(week, content, language = 'hindi') {
        if (language === 'english') {
            return `ЁЯд▒ <b>Week ${week} of Pregnancy</b>

ЁЯН╝ <b>Baby Development:</b>
${content.babyDevelopment.map(point => `тАв ${point}`).join('\n')}

ЁЯСй <b>Changes in Mother's Body:</b>
${content.motherChanges.map(point => `тАв ${point}`).join('\n')}

ЁЯеЧ <b>Nutritional Advice:</b>
${content.nutrition.map(point => `тАв ${point}`).join('\n')}

тЪая╕П <b>Warning Signs:</b>
${content.warningSigns.map(point => `тАв ${point}`).join('\n')}
<b>If you experience any of these symptoms, contact your doctor immediately!</b>

ЁЯТб <b>General Advice:</b>
${content.generalAdvice.map(point => `тАв ${point}`).join('\n')}

ЁЯУЛ <b>Disclaimer:</b> This is for educational purposes only. Continue regular doctor check-ups.

Was this information helpful?`;
        } else {
            return `ЁЯд▒ <b>рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдХрд╛ ${week}рд╡рд╛рдВ рд╕рдкреНрддрд╛рд╣</b>

ЁЯН╝ <b>рд╢рд┐рд╢реБ рдХрд╛ рд╡рд┐рдХрд╛рд╕:</b>
${content.babyDevelopment.map(point => `тАв ${point}`).join('\n')}

ЁЯСй <b>рдорд╛рдБ рдХреЗ рд╢рд░реАрд░ рдореЗрдВ рдмрджрд▓рд╛рд╡:</b>
${content.motherChanges.map(point => `тАв ${point}`).join('\n')}

ЁЯеЧ <b>рдкреЛрд╖рдг рдХреА рд╕рд▓рд╛рд╣:</b>
${content.nutrition.map(point => `тАв ${point}`).join('\n')}

тЪая╕П <b>рдЪреЗрддрд╛рд╡рдиреА рдХреЗ рд╕рдВрдХреЗрдд:</b>
${content.warningSigns.map(point => `тАв ${point}`).join('\n')}
<b>рдЗрдирдореЗрдВ рд╕реЗ рдХреЛрдИ рднреА рд▓рдХреНрд╖рдг рд╣реЛ рддреЛ рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ!</b>

ЁЯТб <b>рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣:</b>
${content.generalAdvice.map(point => `тАв ${point}`).join('\n')}

ЁЯУЛ <b>рдбрд┐рд╕реНрдХреНрд▓реЗрдорд░:</b> рдпрд╣ рдХреЗрд╡рд▓ рд╢рд┐рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рд╣реИред рдирд┐рдпрдорд┐рдд рдбреЙрдХреНрдЯрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рддреЗ рд░рд╣реЗрдВред

рдХреНрдпрд╛ рдпрд╣ рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрдпреЛрдЧреА рдереА?`;
        }
    }

    async sendWeeklyHealthCheck(bot, user) {
        try {
            const currentWeek = calculatePregnancyWeek(user.dueDate);

            let healthQuestions, options;

            if (user.language === 'english') {
                healthQuestions = [
                    "ЁЯй║ <b>Weekly Health Check</b>",
                    "",
                    "Please answer the following questions:",
                    "",
                    "1я╕ПтГг How are you feeling?",
                    "2я╕ПтГг Are you experiencing any new problems?", 
                    "3я╕ПтГг Are you eating and drinking properly?",
                    "4я╕ПтГг Are you sleeping well?",
                    "5я╕ПтГг Can you feel baby's movements? (after 20 weeks)",
                    "",
                    "You can say 'All good' or describe any concerns."
                ].join('\n');

                options = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'All good тЬЕ', callback_data: 'health_good' },
                                { text: 'Some issues ЁЯдХ', callback_data: 'health_issues' }
                            ]
                        ]
                    },
                    parse_mode: 'HTML'
                };
            } else {
                healthQuestions = [
                    "ЁЯй║ <b>рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдВрдЪ</b>",
                    "",
                    "рдХреГрдкрдпрд╛ рдирд┐рдореНрди рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗрдВ:",
                    "",
                    "1я╕ПтГг рдЖрдк рдХреИрд╕реА рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реА рд╣реИрдВ?",
                    "2я╕ПтГг рдХреНрдпрд╛ рдЖрдкрдХреЛ рдХреЛрдИ рдирдИ рдкрд░реЗрд╢рд╛рдиреА рд╣реЛ рд░рд╣реА рд╣реИ?", 
                    "3я╕ПтГг рднреЛрдЬрди рдФрд░ рдкрд╛рдиреА рдХрд╛ рд╕реЗрд╡рди рд╕рд╣реА рд╕реЗ рд╣реЛ рд░рд╣рд╛ рд╣реИ?",
                    "4я╕ПтГг рдиреАрдВрдж рдЕрдЪреНрдЫреА рдЖ рд░рд╣реА рд╣реИ?",
                    "5я╕ПтГг рд╢рд┐рд╢реБ рдХреА рд╣рд░рдХрдд рдорд╣рд╕реВрд╕ рд╣реЛ рд░рд╣реА рд╣реИ? (20 рд╕рдкреНрддрд╛рд╣ рдХреЗ рдмрд╛рдж)",
                    "",
                    "рдЖрдк 'рд╕рдм рдареАрдХ рд╣реИ' рдпрд╛ рдЕрдкрдиреА рдкрд░реЗрд╢рд╛рдиреА рдмрддрд╛ рд╕рдХрддреА рд╣реИрдВред"
                ].join('\n');

                options = {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'рд╕рдм рдареАрдХ рд╣реИ тЬЕ', callback_data: 'health_good' },
                                { text: 'рдХреБрдЫ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ ЁЯдХ', callback_data: 'health_issues' }
                            ]
                        ]
                    },
                    parse_mode: 'HTML'
                };
            }

            await bot.sendMessage(user.telegramId, healthQuestions, options);

            console.log(`Sent weekly health check to user ${user.telegramId}`);
        } catch (error) {
            console.error(`Error sending health check to user ${user.telegramId}:`, error);
        }
    }
}

module.exports = PregnancyService;